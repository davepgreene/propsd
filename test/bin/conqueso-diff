#!/usr/bin/env node
'use strict';

/**
 * Poll Conqueso and propsd to test for interface inconsistencies
 */
const HTTP = require('http');
const ONE_MINUTE = 60000;

/* eslint-disable no-console */
function requestProperties(uri) {
  console.log(`Polling ${uri}`);
  return new Promise((resolve, reject) => {
    const req = HTTP.get(uri, (res) => {
      res.setEncoding('utf8');

      let data = '';

      res.on('data', (d) => {
        data += d;
      });

      res.on('error', reject);

      res.on('end', (d) => {
        if (d) data += d;
        resolve(data.split(/\n/g));
      });
    });

    req.on('error', reject);
  });
}

/**
 * Sort values that are comma-delimited
 * @param {Array} arr
 * @returns {Array}
 */
function sortDelimitedValues(arr) {
  arr.forEach((el, i) => {
    const splitProp = el.split('=');
    let val = splitProp[1];

    if (val.split(',').length > 1) {
      val = val.split(',').sort();
    }
    arr[i] = [splitProp[0], val].join('='); // eslint-disable-line no-param-reassign
  });
  return arr;
}

function compareProperties(a, b) {
  a = sortDelimitedValues(a.sort()); // eslint-disable-line no-param-reassign
  b = sortDelimitedValues(b.sort()); // eslint-disable-line no-param-reassign

  const difference = {
    added: [],
    removed: []
  };

  for (let i = 0; i < b.length; i++) {
    if (!~(a.indexOf(b[i]))) { // eslint-disable-line no-bitwise
      difference.added.push(b[i]);
    }
  }

  for (let j = 0; j < a.length; j++) {
    if (!~(b.indexOf(a[j]))) { // eslint-disable-line no-bitwise
      difference.removed.push(a[j]);
    }
  }

  return difference;
}

function different(difference) {
  return difference.added.length > 0 || difference.removed.length > 0;
}

const CONQUESO = process.argv[2];
const PROPSD = 'http://localhost:9100/v1/conqueso';

(function poll() {
  Promise.all([
    requestProperties(CONQUESO),
    requestProperties(PROPSD)
  ])
  .then((data) => {
    const conqueso = data[0];
    const propsd = data[1];

    const diff = compareProperties(conqueso, propsd);

    if (!different(diff)) {
      return console.log('Properties are identical');
    }

    console.log('Properties are not identical!');
    diff.added.forEach((p) => {
      console.log(`  + ${p}`);
    });

    diff.removed.forEach((p) => {
      console.log(`  - ${p}`);
    });
  }, (err) => { console.error(err); });

  setTimeout(poll, ONE_MINUTE);
}());

/* eslint-enable no-console */
